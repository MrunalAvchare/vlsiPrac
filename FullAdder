fUll ADDER USING HALF ADDER



full_adderst:

library IEEE;

use IEEE.STD_LOGIC_1164.ALL;

entity full_adderst is

Port ( a : in STD_LOGIC;

b : in STD_LOGIC;

cin : in STD_LOGIC; s : out STD_LOGIC;
cout : out STD_LOGIC); end full_adderst;


architecture Structural of full_adderst is component HA_normal is
Port ( a : in STD_LOGIC;

b : in STD_LOGIC;

sum : out STD_LOGIC; carry : out STD_LOGIC);
end component;



component or_gate is

Port ( A : in STD_LOGIC;

B : in STD_LOGIC;

Y : out STD_LOGIC);

end component;
 

u1: HA_normal port map(a,b,temp1,temp2); u2: HA_normal port map(temp1,cin,s,temp3); u3: or_gate port map(temp2,temp3,cout); end Structural;



-----------------------------------------------------------------------------------------------------------------------------
full_addertb:

library ieee;
use IEEE.STD_LOGIC_1164.ALL;
entity full_addertb is end full_addertb;
architecture Behavioral of full_addertb is component full_adderst is
Port ( a : in STD_LOGIC;
b : in STD_LOGIC;
cin : in STD_LOGIC; s : out STD_LOGIC;
cout : out STD_LOGIC); end component;
signal a,b,cin,s,cout : std_logic;
begin
u1 : full_adderst port map(a,b,cin,s,cout);
 --stimuli generation a<='0';
b<='0';
cin<='0';
wait for 100ns; a<='0';
b<='0';
cin<='1';
wait for 100ns; a<='0';
b<='1';
cin<='0';
wait for 100ns; a<='0';
b<='1';
cin<='1';
wait for 100ns; a<='1';
b<='0';
cin<='0';
wait for 100ns; a<='1';
b<='0';
cin<='1';
a<='1';
b<='1';
cin<='0';
wait for 100ns; a<='1';
b<='1';
cin<='1';
wait for 100ns; end process; end Behavioral;
---------------------------------------------------------------------------------------------------------------------------------------

HA_normal

library ieee;
use IEEE.STD_LOGIC_1164.ALL;
entity HA_normal is
Port ( a : in STD_LOGIC;
b : in STD_LOGIC;
sum : out STD_LOGIC; carry : out STD_LOGIC);
end HA_normal;
architecture Behavioral of HA_normal is
begin
sum<= a xor b; carry<= a and b;
end Behavioral;



-----------------------------------------------------------------------


or_gate :

library IEEE;
use IEEE.std_logic_1164.all;
-- Entity declaration
entity or_gate is
port(A : in std_logic;	-- OR gate input B : in std_logic;	-- OR gate input
Y : out std_logic);	-- OR gate output
end or_gate;
-- Dataflow Modelling Style

-- Architecture definition

architecture orLogic of or_gate is
begin
Y <= A OR B;
end orLogic;





 
